cmake_minimum_required(VERSION 3.20)

project(X264)

# set build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel." FORCE)
endif()
message("CMAKE_BUILD_TYPE              : " ${CMAKE_BUILD_TYPE})

# export compile_commands.json
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# include modules
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
include(CheckCCompilerFlag)
include(CheckCSourceCompiles)
include(CheckCSourceRuns)
include(CheckIncludeFile)
include(CheckFunctionExists)
include(CheckSymbolExists)

# build options
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_SKIP_RPATH TRUE)
option(BUILD_SHARED_LIBS  "Build shared library"              ON)
option(ENABLE_CLI         "Enable x264 cli executable"        ON)
option(ENABLE_ASM         "Enable assembly optimizations"     ON)
option(ENABLE_OPENCL      "Enable OpenCL features"            ON)
option(ENABLE_GPL         "Enable GPL-only features"          ON)
option(ENABLE_THREAD      "Enable multithreaded encoding"     ON)
option(ENABLE_WIN32THREAD "Enable win32threads(windows only)" ON)
option(ENABLE_INTERLACED  "Enable interlaced encoding"        ON)
option(ENABLE_LTO         "Enable link-time optimizations"    OFF)
option(ENABLE_ASAN        "Enable address sanitizer"          OFF)
option(ENABLE_AVS         "Enable avisynth support"           OFF)
option(ENABLE_SWSCALE     "Enable libswscale support"         OFF)
option(ENABLE_LAVF        "Enable lavformat support"          OFF)
option(ENABLE_FFMS        "Enable ffmpeg source support"      OFF)
option(ENABLE_GPAC        "Enable gpac support"               OFF)
option(ENABLE_LSMASH      "Enable lsmash support"             OFF)

set(X264_BUILD 164)
#set output bit depth (8, 10, all) [8]
if(NOT DEFINED X264_BIT_DEPTH)
    set(X264_BIT_DEPTH 8)
    add_compile_definitions(BIT_DEPTH=8)
endif()
#output chroma format (420, 422, 444, all) [420]
if(NOT DEFINED X264_CHROMA_FORMAT)
    set(X264_CHROMA_FORMAT 420)
    set(X264_CHROMA_FLAG 0)
endif()

# build directories
set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/install)
set(CMAKE_INSTALL_BINDIR ${CMAKE_INSTALL_PREFIX}/bin)
set(CMAKE_INSTALL_LIBDIR ${CMAKE_INSTALL_PREFIX}/lib)
set(CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX}/include)
message("CMAKE_INSTALL_PREFIX          : " ${CMAKE_INSTALL_PREFIX})
message("CMAKE_INSTALL_BINDIR          : " ${CMAKE_INSTALL_BINDIR})
message("CMAKE_INSTALL_LIBDIR          : " ${CMAKE_INSTALL_LIBDIR})
message("CMAKE_INSTALL_INCLUDEDIR      : " ${CMAKE_INSTALL_INCLUDEDIR})

# print environment information
message("CMAKE_SYSTEM_NAME             : " ${CMAKE_SYSTEM_NAME})
message("CMAKE_SYSTEM_PROCESSOR        : " ${CMAKE_SYSTEM_PROCESSOR})
message("CMAKE_CXX_COMPILER_ID         : " ${CMAKE_C_COMPILER_ID})

# cpu architecture detection
string(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} CPU)
set(CPU_X86 x86 i386 i686 x86_64 amd64)
set(CPU_ARM armv6l armv7l arm64 aarch64)
list(FIND CPU_X86 ${CPU} X86_MATCH)
list(FIND CPU_ARM ${CPU} ARM_MATCH)
if(X86_MATCH GREATER "-1")
    set(X86 1)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(X86_64 1)
        set(ARCH_X86_64 1)
        message("Detected x86_64 target processor")
    else()
        set(ARCH_X86 1)
        message("Detected x86 target processor")
    endif()
elseif(ARM_MATCH GREATER "-1")
    set(ARM 1)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(ARM64 1)
        set(ARCH_AARCH64 1)
        message("Detected ARM64 target processor")
    else()
        set(ARCH_ARM 1)
        message("Detected ARM target processor")
    endif()
else()
    message(FATAL_ERROR "Detected unknown target processor: " ${ARCH})
endif()

# platform detection
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(SYS_LINUX 1)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set(SYS_WINDOWS 1)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(SYS_MACOSX 1)
else()
    message(FATAL_ERROR "Detected unknown target platform: " ${CMAKE_SYSTEM_NAME})
endif()

# complier detection
if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    set(CLANG 1)
endif()
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(GCC 1)
endif()

# set config.h and x264_config.h
include(x264_config)
configure_file(${PROJECT_SOURCE_DIR}/config.h.in ${PROJECT_SOURCE_DIR}/config.h)
configure_file(${PROJECT_SOURCE_DIR}/x264_config.h.in ${PROJECT_SOURCE_DIR}/x264_config.h)
add_compile_definitions(HAVE_CONFIG_H=1)

# set c standard
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED TRUE)
set(CMAKE_C_EXTENSIONS ON)

# set compile options
if (MSVC)
    add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W4 /Wall /Za /WX")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /Ob2")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP /MD /MT")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /Oi /Oy /Gy /Ox /fp:fast")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /EHsc /GR /Qvec- /GS")
else()
    list(APPEND PLATFORM_LIBS pthread m dl)
    if(GCC)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --std=gnu99")
        add_compile_definitions(_GNU_SOURCE)
    endif()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ffast-math -mstackrealign -fno-exceptions")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ftrapv -fstack-protector-strong -fno-omit-frame-pointer")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wfatal-errors -Wextra -Wshadow -Wformat=2")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-maybe-uninitialized -Wno-unused-parameter -Wno-array-bounds")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-conversion -Wno-sign-conversion -Wno-float-conversion -Wno-float-equal -Wno-sign-compare")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-pedantic -Wno-dangling-pointer -Wno-old-style-declaration -Wno-alloc-size-larger-than")
    if(ENABLE_LTO)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -flto")
    endif()
    if(ENABLE_ASAN)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=address")
    endif()
    # TODO: Clang
    if(GCC)
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-Bsymbolic,-z,now,-z,relro,-z,noexecstack")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-Bsymbolic,-z,now,-z,relro,-z,noexecstack")
    endif()
endif()
set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ${C_FLAGS})

# and subdirectories
add_subdirectory(common)
add_subdirectory(encoder)

link_libraries(${PLATFORM_LIBS})
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

add_library(x264 $<TARGET_OBJECTS:encoder> $<TARGET_OBJECTS:common> $<TARGET_OBJECTS:asm>)
set_target_properties(x264 PROPERTIES SOVERSION ${X264_BUILD})

if(ENABLE_CLI)
    set(X264_CLI_SRCS x264.c autocomplete.c)
    list(APPEND X264_CLI_SRCS input/input.c input/timecode.c input/raw.c input/y4m.c)
    list(APPEND X264_CLI_SRCS output/raw.c output/matroska.c output/matroska_ebml.c output/flv.c output/flv_bytestream.c)
    list(APPEND X264_CLI_SRCS filters/filters.c filters/video/video.c filters/video/source.c filters/video/internal.c
        filters/video/resize.c filters/video/fix_vfr_pts.c filters/video/select_every.c filters/video/crop.c filters/video/cache.c filters/video/depth.c)
    if(ENABLE_AVS)
         list(APPEND X264_CLI_SRCS input/avs.c)
    endif()
    if(ENABLE_LAVF)
         list(APPEND X264_CLI_SRCS input/lavf.c)
    endif()
    if(ENABLE_FFMS)
         list(APPEND X264_CLI_SRCS input/ffms.c)
    endif()
    if(ENABLE_GPAC)
         list(APPEND X264_CLI_SRCS output/mp4.c)
    endif()
    if(ENABLE_LSMASH)
         list(APPEND X264_CLI_SRCS output/mp4_lsmash.c)
    endif()
    if(WIN32)
       list(APPEND X264_CLI_SRCS x264dll.c)
    endif()
    if(ENABLE_THREAD)
        list(APPEND X264_CLI_SRCS input/thread.c)
    endif()
    add_executable(x264cli ${X264_CLI_SRCS})
    target_link_libraries(x264cli PRIVATE x264)
    target_include_directories(x264cli PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
    set(CMAKE_SKIP_RPATH FALSE)
    set_target_properties(x264cli PROPERTIES
        INSTALL_RPATH ${CMAKE_INSTALL_LIBDIR}
        BUILD_WITH_INSTALL_RPATH TRUE
    )
    install(TARGETS x264cli RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
endif()

install(TARGETS x264 LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
install(FILES x264.h x264_config.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
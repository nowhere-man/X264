check_include_file(math.h HAS_MATH_H)
check_include_file(malloc.h HAS_MALLOC_H)
check_include_file(sched.h HAS_SCHED_H)
check_include_file(sys/mman.h HAS_MMAN_H)
check_include_file(string.h HAS_STRING_H)
check_include_file(time.h HAS_TIME_H)

set(X264_STACK_ALIGNMENT 4)
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(X264_STACK_ALIGNMENT 16)
endif()
check_c_compiler_flag(-mpreferred-stack-boundary=6 HAS_PREF_STACK_BOUNDARY6)
check_c_compiler_flag(-mstack-alignment=64 HAS_MSTACK_ALIGNMENT64)
check_c_compiler_flag(-mpreferred-stack-boundary=4 HAS_PREF_STACK_BOUNDARY4)
check_c_compiler_flag(-mstack-alignment=16 HAS_MSTACK_ALIGNMENT16)
if(HAS_PREF_STACK_BOUNDARY6)
    set(CMAKE_REQUIRED_FLAGS -mpreferred-stack-boundary=6)
    check_C_source_compiles("void main(){}" BUILDSWITH_PREF_STACK_BOUNDARY6)
    if(BUILDSWITH_PREF_STACK_BOUNDARY6)
        set(X264_STACK_ALIGNMENT 64)
    endif()
elseif(HAS_MSTACK_ALIGNMENT64)
    set(CMAKE_REQUIRED_FLAGS -mstack-alignment=64)
    check_C_source_compiles("void main(){}" BUILDSWITH_MSTACK_ALIGN64)
    if(BUILDSWITH_MSTACK_ALIGN64)
        set(X264_STACK_ALIGNMENT 64)
    endif()
endif()
if(${X264_STACK_ALIGNMENT} LESS 16)
    if(HAS_PREF_STACK_BOUNDARY4)
        set(CMAKE_REQUIRED_FLAGS -mpreferred-stack-boundary=4)
        check_C_source_compiles("void main(){}" BUILDSWITH_PREF_STACK_BOUNDARY4)
        if(BUILDSWITH_PREF_STACK_BOUNDARY4)
            set(X264_STACK_ALIGNMENT 16)
        endif()
    elseif(HAS_MSTACK_ALIGNMENT16)
        set(CMAKE_REQUIRED_FLAGS -mstack-alignment=16)
        check_C_source_compiles("void main(){}" BUILDSWITH_MSTACK_ALIGN16)
        if(BUILDSWITH_MSTACK_ALIGN16)
            set(X264_STACK_ALIGNMENT 16)
        endif()
    endif()
endif()

if(HAS_MATH_H)
    if(NOT MSVC)
        set(CMAKE_REQUIRED_LIBRARIES -lm)
    endif()
    check_symbol_exists(log2f math.h HAS_LOG2F)
else()
    set(HAS_LOG2F 0)
endif()

if(HAS_STRING_H)
    check_symbol_exists(strtok_r string.h HAS_STRTOK_R)
else()
    set(HAS_STRTOK_R 0)
endif()

if(HAS_TIME_H)
    check_symbol_exists(clock_gettime time.h HAS_CLOCK_GETTIME)
else()
    set(HAS_CLOCK_GETTIME 0)
endif()

if(HAS_MMAN_H)
    check_symbol_exists(MAP_PRIVATE sys/mman.h HAS_MMAP)
    check_symbol_exists(MADV_HUGEPAGE sys/mman.h HAS_THP)
else()
    set(HAS_THP 0)
    set(HAS_MMAP 0)
endif()

check_C_source_compiles("#include <stdint.h>\nvoid main(){uint32_t test_vec __attribute__ ((vector_size (16))) = {0,1,2,3};}" HAS_VECTOREXT)

check_symbol_exists(fseeko stdio.h HAS_FSEEKO)
check_symbol_exists(fseeko64 stdio.h HAS_FSEEKO64)
check_symbol_exists(_fseeki64 stdio.h HAS_FSEEKI64)
if(HAS_FSEEKO)
    set(X264_FSEEK fseeko)
    set(X264_FTELL ftello)
elseif(HAS_FSEEKO64)
    set(X264_FSEEK fseeko64)
    set(X264_FTELL ftello64)
elseif(HAS_FSEEKI64)
    set(X264_FSEEK _fseeki64)
    set(X264_FTELL _ftelli64)
endif()

set(X264_USE_GPL 0)
if(ENABLE_GPL)
    set(X264_USE_GPL 1)
endif()

check_C_source_compiles("void main(){__asm__(\"pabsw %xmm0, %xmm0\");}" HAS_X86_INLINE_ASM)
if(HAS_X86_INLINE_ASM)
    check_C_source_compiles("void main(){__asm__(\"pabsw %xmm0, %xmm0\");}" HAS_MMX)
else()
    set(HAS_X86_INLINE_ASM 0)
    set(HAS_MMX 0)
endif()

if(MSVC AND ${HAS_X86_INLINE_ASM} EQUAL 0)
    check_C_source_compiles("void main(){__asm pabsw xmm0, xmm0;}" HAS_X86_INLINE_ASM)
    if(HAS_X86_INLINE_ASM)
        check_C_source_compiles("void main(){__asm pabsw xmm0, xmm0;}" HAS_MMX)
    else()
        set(HAS_X86_INLINE_ASM 0)
        set(HAS_MMX 0)
    endif()
    if("${HAS_X86_INLINE_ASM}" EQUAL 0)
        if(HAS_MSVC_OPT_INTRINSICS)
            set(CMAKE_REQUIRED_FLAGS "/Oi")
        endif()
        check_C_source_compiles("#include <emmintrin.h>\nint main(void){int v = 0;__m128i vreg = {0};vreg = _mm_set1_epi32(v);return v;}" HAS_MMX_FROM_INTRINSICS)
        if(NOT ${HAS_MMX_FROM_INTRINSICS})
            set(HAS_MMX 0)
        else()
            set(HAS_MMX 1)
        endif()
    endif()
endif()

if(ARM)
    if(ARM64)
        set(HAS_AARCH64 1)
    endif()
    set(CMAKE_REQUIRED_FLAGS -mcpu=cortex-a8 -mfpu=neon)
    check_C_source_compiles("void main(){__asm__(\"add r0, r1, r2\");}" HAS_ARM_INLINE_ASM)
    check_C_source_compiles("void main(){__asm__(\"rev ip, ip\");}" HAS_ARMV6)
    check_C_source_compiles("void main(){__asm__(\"movt r0, #0\");}" HAS_ARMV6T2)
    check_C_source_compiles("void main(){__asm__(\"vadd.i16 q0, q0, q0\");}" HAS_NEON)
else()
    set(HAS_AARCH64 0)
    set(HAS_AARCH64 0)
    set(HAS_ARMV6 0)
    set(HAS_ARMV6T2 0)
    set(HAS_NEON 0)
    set(HAS_ARM_INLINE_ASM 0)
endif()

if(ENABLE_THREAD)
    find_package(Threads REQUIRED)
    if(THREADS_FOUND)
        set(HAVE_THREAD 1)
        set(HAVE_POSIXTHREAD ${CMAKE_USE_PTHREADS_INIT})
        set(HAVE_WIN32THREAD ${CMAKE_USE_WIN32_THREADS_INIT})
        if(HAVE_POSIXTHREAD)
            message(STATUS "threading library found: pthreads")
        endif()
        if(HAVE_WIN32THREAD)
            message(STATUS "threading library found: win32threads")
        endif()
        if(HAVE_POSIXTHREAD AND HAVE_WIN32THREAD)
            message(STATUS "win32threads and pthreads found!")
            if(DEFINED CMAKE_SYSTEM_NAME AND ${CMAKE_SYSTEM_NAME} MATCHES "Windows")
                message(STATUS "detected building for Windows, unsetting pthreads")
                unset(HAVE_POSIXTHREAD)
            endif()
            if(NOT DEFINED CMAKE_THREAD_PREFER_PTHREAD OR NOT ${CMAKE_THREAD_PREFER_PTHREAD})
                message(STATUS "detected pthreads is not preferred, unsetting pthreads")
                unset(HAVE_POSIXTHREAD)
            endif()
        endif()
    else()
        message(STATUS "threading library NOT found")
    endif()
else()
    set(HAVE_POSIXTHREAD 0)
    set(HAVE_WIN32THREAD 0)
    set(HAVE_THREAD 0)
endif()

set(X264_USE_INTERLACED 0)
if(ENABLE_INTERLACED)
    set(X264_USE_INTERLACED 1)
endif()

if(SYS_LINUX AND HAS_SCHED_H)
    set(CMAKE_REQUIRED_FLAGS -D_GNU_SOURCE)
    check_symbol_exists(CPU_COUNT sched.h HAS_CPU_COUNT)
else()
    set(HAS_CPU_COUNT 0)
endif()

set(X264_USE_INTERLACED 0)
if(ENABLE_INTERLACED)
    set(X264_USE_INTERLACED 1)
endif()

set(HAS_OPENCL 0)
if(ENABLE_OPENCL)
    set(HAS_OPENCL 1)
endif()

check_c_compiler_flag("-mvsx" HAS_VSX)
if(NOT HAS_VSX)
    set(HAS_VSX 0)
endif()

if(ARM)
    set(AS_FUNC_CODE "
    .func test
    .endfunc
    int main() { return 0; }
    ")
    check_c_source_compiles(${AS_FUNC_CODE} HAVE_AS_FUNC)
else()
    set(HAVE_AS_FUNC 0)
endif()

if(WIN32 AND MSVC)
    set(CHECK_CODE "
    #include<winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
    int main() { return 0; }
    #else
    #error \"error\"
    #endif
    ")
    check_c_source_compiles(${CHECK_CODE} HAS_WINRT)
else()
    set(HAS_WINRT 0)
endif()

if(ARM64)
    check_C_source_compiles("void main(){__asm__(\".arch armv8.2-a+sve  \n ptrue p0.b, vl16\");}" HAS_SVE)
    check_C_source_compiles("void main(){__asm__(\".arch armv8.2-a+sve2 \n smlalb z10.s, z2.h, z1.h\");}" HAS_SVE2)
else()
    set(HAS_SVE 0)
    set(HAS_SVE2 0)
endif()